package br.brechosustentavel.repository.inicializador;

import br.brechosustentavel.seeder.H2Seeder;
import br.brechosustentavel.service.hash.BCryptAdapter;
import br.brechosustentavel.service.hash.HashService;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class H2InicializaBancoDeDados extends AbstractInicializaBancoDeDados{

    public H2InicializaBancoDeDados(Connection conexao) {
        super(conexao);
    }

    @Override
    public void inicializar() {
        criarTabelaUsuario();
        criarTabelaVendedor();
        criarTabelaComprador();
        criarTabelaInsignia();
        criarTabelaVendedorInsignia();
        criarTabelaCompradorInsignia();
        criarTabelaTipoPeca();
        criarTabelaDefeito();
        criarTabelaComposicao();
        criarTabelaPeca();
        criarTabelaDefeitoPeca();
        criarTabelaAnuncio();
        criarTabelaOferta();
        criarTabelaTransacao();
        criarTabelaEventoLinhaDoTempo();
        criarTabelaComposicaoPeca();
        criarTabelaDenuncia();
        criarTabelaAvaliacao();
    }

    private void criarTabelaUsuario() {
        String sql = """
                CREATE TABLE IF NOT EXISTS usuario (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR(255) NOT NULL,
                    telefone VARCHAR(50),
                    email VARCHAR(255) NOT NULL UNIQUE,
                    senha VARCHAR(255) NOT NULL,
                    data_criacao TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    admin BOOLEAN NOT NULL DEFAULT FALSE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaVendedor() {
        String sql = """
                CREATE TABLE IF NOT EXISTS vendedor (
                    id_vendedor INT PRIMARY KEY,
                    nivel_reputacao VARCHAR(50) NOT NULL DEFAULT 'Bronze',
                    estrelas DOUBLE NOT NULL DEFAULT 0,
                    vendas_concluidas INT NOT NULL DEFAULT 0,
                    gwp_contribuido DOUBLE NOT NULL DEFAULT 0,
                    FOREIGN KEY (id_vendedor) REFERENCES usuario(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaComprador() {
        String sql = """
                CREATE TABLE IF NOT EXISTS comprador (
                    id_comprador INT PRIMARY KEY,
                    nivel_reputacao VARCHAR(50) NOT NULL DEFAULT 'Bronze',
                    estrelas DOUBLE NOT NULL DEFAULT 0,
                    compras_finalizadas INT NOT NULL DEFAULT 0,
                    gwp_evitado DOUBLE NOT NULL DEFAULT 0,
                    selo_verificador BOOLEAN NOT NULL DEFAULT FALSE,
                    FOREIGN KEY (id_comprador) REFERENCES usuario(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaInsignia() {
        String sql = """
                CREATE TABLE IF NOT EXISTS insignia (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR(255) NOT NULL,
                    valor_estrelas DOUBLE NOT NULL,
                    tipo_perfil VARCHAR(50) NOT NULL CHECK(tipo_perfil IN ('Vendedor', 'Comprador'))
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaVendedorInsignia() {
        String sql = """
                CREATE TABLE IF NOT EXISTS vendedor_insignia (
                    id_vendedor INT NOT NULL,
                    id_insignia INT NOT NULL,
                    PRIMARY KEY(id_vendedor, id_insignia),
                    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_vendedor) ON DELETE CASCADE,
                    FOREIGN KEY (id_insignia) REFERENCES insignia(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaCompradorInsignia() {
        String sql = """
                CREATE TABLE IF NOT EXISTS comprador_insignia (
                    id_comprador INT NOT NULL,
                    id_insignia INT NOT NULL,
                    PRIMARY KEY(id_comprador, id_insignia),
                    FOREIGN KEY (id_comprador) REFERENCES comprador(id_comprador) ON DELETE CASCADE,
                    FOREIGN KEY (id_insignia) REFERENCES insignia(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaTipoPeca() {
        String sql = """
                CREATE TABLE IF NOT EXISTS tipo_peca (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR(255) NOT NULL UNIQUE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaDefeito() {
        String sql = """
                CREATE TABLE IF NOT EXISTS defeito (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR(255) NOT NULL UNIQUE,
                    desconto DOUBLE NOT NULL,
                    id_tipo INT NOT NULL,
                    FOREIGN KEY (id_tipo) REFERENCES tipo_peca(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaComposicao() {
        String sql = """
                CREATE TABLE IF NOT EXISTS composicao (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR(255) NOT NULL UNIQUE,
                    fator_emissao DOUBLE NOT NULL
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaPeca() {
        String sql = """
                CREATE TABLE IF NOT EXISTS peca (
                    id_c VARCHAR(50) PRIMARY KEY,
                    subcategoria VARCHAR(255) NOT NULL,
                    tamanho VARCHAR(50) NOT NULL,
                    cor VARCHAR(50) NOT NULL,
                    massa DOUBLE NOT NULL,
                    estado_conservacao VARCHAR(50) NOT NULL,
                    preco_base DOUBLE NOT NULL,
                    id_tipo INT,
                    FOREIGN KEY (id_tipo) REFERENCES tipo_peca(id) ON DELETE SET NULL
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaComposicaoPeca() {
        String sql = """
                CREATE TABLE IF NOT EXISTS composicao_peca (
                    id_composicao INT NOT NULL,
                    id_peca VARCHAR(50) NOT NULL,
                    quantidade INT NOT NULL,
                    PRIMARY KEY(id_composicao, id_peca),
                    FOREIGN KEY (id_composicao) REFERENCES composicao(id) ON DELETE CASCADE,
                    FOREIGN KEY (id_peca) REFERENCES peca(id_c) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaDefeitoPeca() {
        String sql = """
                CREATE TABLE IF NOT EXISTS defeito_peca (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_defeito INT NOT NULL,
                    id_peca VARCHAR(50) NOT NULL,
                    UNIQUE(id_defeito, id_peca),
                    FOREIGN KEY (id_defeito) REFERENCES defeito(id) ON DELETE CASCADE,
                    FOREIGN KEY (id_peca) REFERENCES peca(id_c) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaEventoLinhaDoTempo() {
        String sql = """
                CREATE TABLE IF NOT EXISTS evento_linha_tempo (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_peca VARCHAR(50) NOT NULL,
                    descricao VARCHAR(255) NOT NULL,
                    ciclo_n INT NOT NULL,
                    tipo_evento VARCHAR(50) NOT NULL,
                    data TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    gwp_evitado DOUBLE NOT NULL,
                    mci_peca DOUBLE NOT NULL,
                    FOREIGN KEY (id_peca) REFERENCES peca(id_c) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaAnuncio() {
        String sql = """
                CREATE TABLE IF NOT EXISTS anuncio (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_vendedor INT NOT NULL,
                    id_peca VARCHAR(50) NOT NULL,
                    valor_final DOUBLE NOT NULL,
                    gwp DOUBLE NOT NULL,
                    mci DOUBLE NOT NULL,
                    status VARCHAR(50) NOT NULL DEFAULT 'ativo',
                    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_vendedor),
                    FOREIGN KEY (id_peca) REFERENCES peca(id_c) ON DELETE CASCADE,
                    UNIQUE(id_peca, status)
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaOferta() {
        String sql = """
                CREATE TABLE IF NOT EXISTS oferta (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_anuncio INT,
                    id_comprador INT,
                    valor DOUBLE NOT NULL,
                    data TIMESTAMP,
                    data_resposta TIMESTAMP,
                    status VARCHAR(50) NOT NULL,
                    FOREIGN KEY (id_anuncio) REFERENCES anuncio(id),
                    FOREIGN KEY (id_comprador) REFERENCES comprador(id_comprador)
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaTransacao() {
        String sql = """
                CREATE TABLE IF NOT EXISTS transacao (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_oferta INT NOT NULL,
                    valor_total DOUBLE NOT NULL,
                    data TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (id_oferta) REFERENCES oferta(id) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaDenuncia() {
        String sql = """
                CREATE TABLE IF NOT EXISTS denuncia (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_anuncio INT NOT NULL,
                    id_comprador INT NOT NULL,
                    data TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    motivo VARCHAR(255) NOT NULL,
                    descricao VARCHAR(255),
                    status VARCHAR(50) NOT NULL DEFAULT 'Pendente',
                    FOREIGN KEY (id_anuncio) REFERENCES anuncio(id) ON DELETE CASCADE,
                    FOREIGN KEY (id_comprador) REFERENCES comprador(id_comprador) ON DELETE CASCADE
                );
                """;
        executarSQL(sql);
    }

    private void criarTabelaAvaliacao() {
        String sql = """
                CREATE TABLE IF NOT EXISTS avaliacao (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_transacao INT NOT NULL,
                    id_autor INT NOT NULL,
                    texto VARCHAR(255) NOT NULL,
                    data TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (id_transacao) REFERENCES transacao(id),
                    FOREIGN KEY (id_autor) REFERENCES usuario(id)
                );
                """;
        executarSQL(sql);
    }

    private void executarSQL(String sql) {
        try (PreparedStatement pstmt = conexao.prepareStatement(sql)) {
            pstmt.execute();
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao criar tabela no H2: " + e.getMessage(), e);
        }
    }
    
    @Override
    protected void popularDadosIniciais() throws SQLException {
        HashService hashParaSeeder = new BCryptAdapter();
        H2Seeder seeder = new H2Seeder(conexao, hashParaSeeder);
        seeder.inserir();
    }
}